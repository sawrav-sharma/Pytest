trigger:
- XYZBank

pool:
  vmImage: 'windows-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.10'
    addToPath: true

- script: |
    python -m venv env
    source env/bin/activate
    pip install pytest
    pip install selenium
    pip install webdriver_manager
    pip install allure-pytest
    pip install faker
    pip install xlrd
    pip install pytest pytest-azurepipelines
    pip install pytest-cov
    pip install pytest-html
    pytest --alluredir=./allure-results --cov=Tests/
  workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Run pytest with Allure'

- task: PublishPipelineArtifact@1
  inputs:
    artifactName: 'pytest-report'
    targetPath: '$(System.DefaultWorkingDirectory)/report.html'
    publishLocation: 'pipeline'
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/allure-results/*.xml'

# - script: |
#     wget https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.14.0/allure-commandline-2.14.0.zip -O allure.zip
#     unzip allure.zip -d /opt
#     export PATH="$PATH:/opt/allure-2.14.0/bin"
#   displayName: 'Install Allure command-line tool'

# - script: |
#     allure generate ./allure-results --clean -o ./allure-report
#   displayName: 'Generate Allure Report'

# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Allure Report'
#   inputs:
#     artifactName: 'allure-report'
#     pathtoPublish: '$(System.DefaultWorkingDirectory)/allure-report'

# - task: Bash@3
#   displayName: 'Generate Allure Report'
#   inputs:
#     targetType: 'inline'
#     script: |
#       allure serve allure-results/
#   condition: always()

# - task: PublishBuildArtifacts@1
#   displayName: 'Publish Allure Report'
#   inputs:
#     artifactName: 'allure-report'
#     pathtoPublish: '$(System.DefaultWorkingDirectory)/allure-report'


- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/TEST-*.xml'
    testRunTitle: 'Script results'

# - task: PublishBuildArtifacts@1
#   inputs:
#     ArtifactName: 'Report'
#     PathToPublish: './TestResults/'

- task: SendEmail@1
  inputs:
    To: 'saurav.sharma@infostride.com'
    CC: 'ankit.kumar@infostride.com'
    From: 'fortestingpurpose9211@gmail.com'
    Subject: 'test results'
    Body: |
      Pipeline: $(System.TeamProject)/$(System.DefinitionName)
      Run ID: $(Build.BuildId)
    Attachment: '$(System.DefaultWorkingDirectory)/report.html'
    SmtpServer: 'smtp.gmail.com'
    SmtpUsername: 'fortestingpurpose9211@gmail.com'
    SmtpPassword: 'ykmfoidvtjlhytao'
    SmtpPort: '587'